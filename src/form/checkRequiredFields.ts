import chalk from 'chalk';
import { EmptyField } from '../types/types';

// Fonction pour v√©rifier les champs requis
export async function checkRequiredFields(page): Promise<EmptyField[]> {
    console.log(chalk.blue('üîç D√©but de la v√©rification des champs requis...'));
    
    // Modification pour inclure les champs avec aria-required="true"
    const requiredFields = await page.$$('input[required], textarea[required], select[required], input[aria-required="true"], textarea[aria-required="true"], select[aria-required="true"]');
    console.log(chalk.yellow(`üìä Nombre total de champs requis trouv√©s : ${requiredFields.length}`));
    
    // Recherche additionnelle pour les groupes de boutons radio requis
    const radioGroups = await page.$$('fieldset:has(input[type="radio"][aria-required="true"])');
    console.log(chalk.yellow(`üìä Nombre de groupes radio requis trouv√©s : ${radioGroups.length}`));
    
    const emptyFields: EmptyField[] = [];

    for (const field of requiredFields) {
        try {
            // R√©cup√©ration combin√©e du tagName et elementType
            const { tagName, elementType } = await field.evaluate((el) => {
                const tag = el.tagName.toLowerCase();
                return {
                    tagName: tag,
                    elementType: el instanceof HTMLInputElement ? el.type : tag
                };
            });

            const id = await field.evaluate(el => el.id);
            const label = await field.evaluate(el => {
                const labelEl = document.querySelector(`label[for="${el.id}"]`);
                return labelEl?.textContent?.trim() || 'Label non trouv√©';
            });

            console.log(chalk.cyan(`   Champ trouv√© - Type: ${elementType}, ID: ${id}, Label: ${label}`));

            let isEmpty = false;
            if (elementType === 'radio') {
                isEmpty = await field.evaluate(el => {
                    const name = el.getAttribute('name');
                    return !document.querySelector(`input[type="radio"][name="${name}"]:checked`);
                });
            } else if (tagName === 'select') { // Utilisez tagName ici pour plus de fiabilit√©
                isEmpty = await field.evaluate(el => {
                    const value = (el as HTMLSelectElement).value;
                    // V√©rifier plusieurs formats possibles d'options par d√©faut
                    return !value || value === 'Select an option' || value === 'S√©lectionner une option' || value === el.querySelector('option:first-child')?.value;
                });
            } else {
                const value = await field.evaluate(el => el.value);
                isEmpty = !value;
            }
            
            if (isEmpty) {
                emptyFields.push({ element: field, label });
                console.log(chalk.yellow(`   ‚ö†Ô∏è Champ vide d√©tect√© : ${label}`));
            }
        } catch (error) {
            console.error(chalk.red(`‚ùå Erreur lors de l'analyse d'un champ :`, error));
        }
    }
    
    // Traitement sp√©cifique pour les groupes radio
    for (const group of radioGroups) {
        try {
            const id = await group.evaluate(el => el.id);
            const label = await group.evaluate(el => {
                const legendEl = el.querySelector('legend');
                return legendEl?.textContent?.trim() || 'Label non trouv√©';
            });
            
            console.log(chalk.cyan(`   Groupe radio trouv√© - ID: ${id}, Label: ${label}`));
            
            // V√©rifier si un bouton est s√©lectionn√© dans le groupe
            const isEmpty = await group.evaluate(el => {
                return !el.querySelector('input[type="radio"]:checked');
            });
            
            if (isEmpty) {
                emptyFields.push({ element: group, label });
                console.log(chalk.yellow(`   ‚ö†Ô∏è Groupe radio sans s√©lection : ${label}`));
            }
        } catch (error) {
            console.error(chalk.red(`‚ùå Erreur lors de l'analyse d'un groupe radio :`, error));
        }
    }

    console.log(chalk.green(`‚úÖ V√©rification termin√©e - ${emptyFields.length} champs vides trouv√©s`));
    return emptyFields;
}